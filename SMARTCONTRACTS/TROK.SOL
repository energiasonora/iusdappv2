// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// OBJECTIVE:
// fix bug, properly limit 1440 per day
// ____________________________________________________________
// deployed on arbitrum sepolia 
// ____________________________________________________________
 

import "@openzeppelin/contracts@5.0.1/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts@5.0.1/token/ERC20/extensions/ERC20Permit.sol";
import "@openzeppelin/contracts@5.0.1/access/AccessControl.sol";


contract TrokToken is ERC20, ERC20Permit, AccessControl {
    constructor() ERC20("TrokToken", "TROK") ERC20Permit("TrokToken") {
        _grantRole(VALIDATOR_ROLE, msg.sender);
    }

    bytes32 public constant VALIDATOR_ROLE = keccak256("VALIDATOR_ROLE");
    uint256 public constant MAX_MINT_AMOUNT = 1440; // 1440 tokens per day

    struct MintInfo {
        uint256 lastMintTimestamp;
        uint256 amountMinted;
    }

    mapping(address => MintInfo) public mintingInfo;

    function decimals() public view virtual override returns (uint8) {
        return 0;
    }

    function mint(address to, uint256 amount) external {
        require(hasRole(VALIDATOR_ROLE, msg.sender), "Caller is not a validator");

        MintInfo storage info = mintingInfo[to];
        
        // Reset the amount minted if more than 24 hours have passed
        if (block.timestamp - info.lastMintTimestamp >= 1 days) {
            info.amountMinted = 0;
            info.lastMintTimestamp = block.timestamp;
        }

        require(info.amountMinted + amount <= MAX_MINT_AMOUNT, "Mint amount exceeds daily limit");

        info.amountMinted += amount;
        _mint(to, amount);
    }
}

